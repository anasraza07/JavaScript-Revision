Scopes help us avoid naming conflicts 
Any varibale we create inside curly brackets will only exist inside the curly brackets
Strategy for Javascript:
1. Figure out what steps we need
2. Convert these steps into code
and this is called Algorithm
Falsy values:
false 0 '' Nan undefined null
except above list all are truthy values
Nan: when we do some invalid math
If the first value is falsy the guard operator will stop early and the result will be the first value, otherwise it wont stop early and give us a second value as a result
In default operator it will stop early when first value is truthy; it is to set the default value.
&& has a higher priority than || operator

07-Functions
a function lets us to reuse code and make our code easier to update
rules for function name: 
1. cant use special words ex. function
2. cant start with a number
3. cant use special characters except $ and _
best practice = use camelCase
Return statement: let us get a value out of a function
Parameter: put value into a function

08-Objects
objects let us group and use multiple values together
obj.notExist = undefined
Bracket notation lets us use properties that dont work with dot notation
Function inside object = Method ex. log is a method inside console which is an object
Built-in objects: Objects provided by the language itself
1. JSON Object: help us work with json, now what is json?
JSON (Javascript object notation): is basically a syntax similar to JS object, it is universal as it can understand by almost all programming languages while Javascript object only make sense in Javascript that's why we use JSON when we send data between computers. We also use JSON when we store data.
JSON Object is used to convert back and forth between Javascript object and JSON
2. Localstorage: used to save values more permanently and doesnt delete the values when we refresh the page while varibales are temporary and after refresh the page they are set to the default values again.
Localstorage only supports strings
null and undefined are both similar things but null = when we intentionally want something to be empty. In most cases they both work in the same way
Other values like strings can also have properties and methods
So Javascript automatically wraps string in a special object and this feature is called Auto-Boxing. This feature also work with other type of values like numbers and booleans.
but it not works with null and undefined it wil give us an error.
Objects are references, the values inside the object save somewhere in computer's memory and the varibale actually just get the reference to that object so by this way Javascript become more efficient when used to copy object so Javascript just makes copy of the reference to that object which is much faster tha copying a whole big object over and over again, this called Copy by Reference.
so we are able to change value inside the object even though we use const but bcuz it has the reference so const doesnt prevent us from reaching into the reference and changing the object
We can't compare objects directly even the values are same bcuz code compares the reference we are saving and not the values inside the object
Destructuring: its an easier way to take properties out of an object

09-DOM
DOM is an another Built-in object called document object, the document object represents / models the webpage thats why is called document object model
We can have elements inside Javascript, the DOM combines Javascript and html together and gives Javascript full control of the webpage.
When an HTML element is inside our Javascript it converted into a Javascript object
innerText will give us the text inside the element wihtout all those spaces around it.
cLicks, keydowns => events
onclick, onkeydown => event listeners
Every event listener also gets an event object.
When string only contains a number and we subract, divide or multiply Javascript will automatically convert string into a number.
but adding works differently it will change number into a string and combines them both string and a number thats why the best practice is always always do math using nummbers.
Window is also a Built-in object that represents a browser. what is inside the browser is inside this window object. it has a shortcut that we dont have to put window name again and again Javascript adds it automatically for us before any property of window object

10-HTML, CSS and Javascript together
Every element has another property called classlist that gives us control of the class attribute, classList itselt is an object also which has some properties and methods
rel attribute in link element tells the computer what type of file we are loading

11-Arrays and Loops (PART 1): 
An array is an another type of value in Javascript and it represents a list of other values
Index: represents the position in array that we want to get, index starting from zero (0) called a 0 indexed array.
Array is an object but it is just a special type of object.
Loops let us run some code over and over, there are 3 major parts of loop:
a. loop varibale
b. loop condition
c. increment step
Each time we run a loop, this is called iteration
For vs While loop:
standard loop => for
non-Standard loop => while
Accumulator Pattern:
1. create a variable to store the result
2. loop through the array and update the result

(PART 2):
Arrays works the same way they are references also, if we create a variable of an array the variable doesnt actually contain values rather than that array is saved somewhere in computers memory and this variable only contains a reference that points to where this array is. This means if we create a copy of this variable, array2 doesnt contain a copy of the values, it just contains a copy of the reference. So now both of the varibales are pointing to the same array. 
More features about loops => 1. break = exit a loop early (let us stop the loop early)
2. continue = lets us skip 1 iteration of the loop

12-Advanced Functions
Functions are also values, we can save them inside a variable
Passing a function into another function, called : callback function or Callback.
SetTimeout() allows us to run function in the future.
Asynchronous code: means computer wont wait for a line to finish before going to the next line, so for SetTimeout it will just set up the timer and then immediately go to the next line.
Synchronous code: means computer will wait for one line to finish before going to the next line.
all the code that we normally write will be synchronous code, the only time that code becomes asynchronous is when we use certain features of Javascript like SetTimeout.
Advantages of SetTimeout: it doesnt block our code for x seconds, it just sets up the timer in the background and go to the next line of code
SetInterval() it will keep running function in the future. SetInterval returns a number which is like an ID so that can use this ID to stop the interval.
.forEach is the preferred way to loop through an array, in forEach return keyword works like continue in forloop for skip any iteration, but there is not the easy way to use break in forEach so if we need to use break then its better to use regualar forLoop.

(PART 2):
When passing a function into another function it is perfer to use an arrow function, arrow function works mostly like regular function but it have some shortcuts that regular dont have
Arrow function doesnt provide us hoisting which means we cant call it before we create it like regular function so for hoisting regular function must be use
Every HTML element have a method that is addEventListener which lets us run some code when we interact with the element (it sort of does something as onclick)
The way to find these event names is to look at this attribute, so the word after "on" is the event
addEventListener has some Advantages over an attribute:
1. it lets us add multiple event listeners for one event
2. we can remove an event listener using the another method .removeEventListener
that's why Best practice = use addEventListener instead of using onclick attribute
2 More Array Methods: (i)- .filter() is just like forEach but only the difference is that in 
.filter() the inner function will return a value.
.filter() creates a new array, if inner function return true it puts the value in an array, if the inner function return false it will not put the value in the new array.
(ii)- .map() is just like forEach and filter(), but it transform an array into another array
.map() creates a new array, and then whatever we return will be added to new array.
Closure: means if a function has access to a value, it will always have access to that value. The value gets packaged together (enclosed) with the function


















