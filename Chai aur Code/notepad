******************** Variables ********************
Prefer not to use 'var' because of issue in block scope and functional scope
kisi keyword ke bagair bhi variable bn skta hai (accountCity = "Jaipur"), memory reserve hoskti hai but krna nhi hai aesa kbhi

******************** Datatypes ********************
number => 2 to the power 53
bigint
string => ""
boolean => true/false
null => standalone value
undefined => undefined value
symbol => unique

object
type of null is object
type of undefined is undefined

"33" => 33
"33abc" => Nan
true => 1; false/null => 0

1 => true; 0 => false
"" => false
"anas" => true

******************** Operations ********************
"1" + 2 => 12
1 + "2" => 12
"1" + 2 + 2 => 122
1 + 2 + "2" => 32

******************** Summary ********************
Primitive Datatype (call by value)
7 types: String, Number, Boolean, null, undefined, Symbol, BigInt

Non-primitive Datatype (call by reference)
Array, Objects, Functions

typeof string => string
typeof number => number
typeof boolean => boolean
typeof null => object
typeof undefined => undefined
typeof symbol => symbol
typeof array => object
typeof object => object
typeof function => object function
    
******************** Stack and Heap Memory in Javascript ********************
Stack (Primitive), Heap (Non-primitive): stack main eik ke ooper eik data aata hai jb variable declare krte hain to   uska naam aajaata hai stack main. agr stack se koi bhi chz lenge to copy hi milegi aapko original value change nhi hogi lekin agr heap se aapne kch lia to wo reference deta hai, original value change hojayegi saath main.

******************** Strings ********************
string.length
string.toUpperCase()
string.charAt(2)
string.indexOf('t')
string.subString(2, 4) => index 2 se shuru index 4 tk (index 4 not included)
string.slice(-3, 4) => index (length + (-3)) se shuru index 4 tk (not included)
string.trim()
string.replace('searchValue', 'replaceValue')
string.split('seperator')

******************** Numbers and Math ********************
number.toString().length
number.toFixed(0)
number.toPrecision(4) => decimal ko precise krke dega 4 digit hi hamesha
number.toLocaleString('en-IN') => by default according to UAE standard main commas lagaake dega

Math.abs(-4) => 4 (make any negative number positive);
Math.round(4.6);
Math.ceil(4.2);
Math.floor(4.9);
Math.min(4, 3, 6, 8);
Math.max(4, 3, 6, 8);
Math.random();
(Math.random() * 10) + 1
imp trick =  (Math.floor(Math.random() * (max - min + 1)) + min)

******************** Dates ********************
new Date().toString() => Wed Mar 01 2023 12:43:12 GMT+0000 (Coordinated Universal Time)
new Date().toDateString() => Wed Mar 01 2023
new Date().toLocaleString() => 3/1/2023, 12:43:12 PM
new Date(2023, 0, 23).toDateString() => Mon Jan 23 2023
new Date(2023, 0, 23, 5, 3).toLocaleString() => Mon Jan 23 2023 05:03:00 AM
new Date("2023-01-14").toLocaleString() => 1/14/2023, 12:00:00 AM
new Date("01-14-2023").toLocaleString() => 1/14/2023, 12:00:00 AM
Date.now() => miliseconds from 01 Jan 1970
new Date("01-14-2023").getTime() => date into miliseconds
miliseconds into seconds => miliseconds / 1000
new Date().getMonth() + 1 => start from (0)
new Date().getDay() => start from sunday (0) 
new Date().toLocaleSring('default', { weekend: long }) => we can customize more

******************** Control Flow ********************
if (balance > 500) console.log('test') => implicit scope (not a best practice)
comparison operators:
<, >, <=, >=, ==, !=, ===, !==

logical operators => &&, ||

switch case => agr break use nhi kia to jahan case match kr jayega wahan se saara code execute hoga except default case

extra falsy values for interview => -0, BigInt 0n
surprised truthy values => "0", 'false', [], {}, 

to check empty array we should check like this:
if (array.length === 0) { console.log("Array is empty") };

to check empty object we should check like this:
if (Object.keys(obj).length === 0) { console.log("Object is empty") };

Nullish Coalescing Operator (??): null undefined 
returns its right-hand side operand when its left-hand side operand is null or undefined, otherwise returns its left-hand side operand.
val1 = 5 ?? 10 // output => 5
val1 = null ?? 10 // output => 10
val1 = undefined ?? 20 // output => 20
val1 = null ?? 10 ?? 29 // output => 10

Ternary Operator:
condition ? true : false

******************** Functions ********************
sayMyName => reference
sayMyName() => execution

default value to function parameter = agr argument pass nhi kia to wo default value use hojayegi
function default(num1 = 2){};

rest operator => extra function arguments ko eik array main pack krke de dega
function restFunction(...num1){ return num1 };
restFunction(200, 3000, 399, 299) => [200, 3000, 399, 299]

closures: child function ka parent function ke variable ko access krna

this = current context, current values, current variables ki baat krta hai object scope ke andr agr ho to wrna function main aesa kch nhi deta
browser ke andr jo global object hai wo hai window object 
node ke andr this ko console.log krne se empty object aata hai but agr function ke andr this ko console.log kia to bht si values aati hain
arrow function main this empty object hi deta hai

arrow function use krte hue curly brackets main return use hoga but agr parentheses hain to return use nhi hoga
implicit return = const addOne = (num1, num2) => num1 + num2

object return krne ke liye parentheses use krne hi parenge
implicit return = const addOne = (num1, num2) => ({username: 'Anas'})

IIFE: global scope ke pollution se bachne ke liye aur immediately function ko invoke krne ke liye use hota hai
IIFE ko end krne ke liye semicolon lagana bhi zaroori hai

***************** Javascript Execution Context + Call Stack *****************
jb ham code file dete hain to sbse pehle jo chz banti hai wo hai 'Global Execution Context' jisko refer krdia jaata hai eik variable = 'this' 
is 'this' variable main Global EC rkhdia jaata hai
Javascript eik single threaded hai hr chz processes main hoti hai
- Global Execution Context
- Function Execution Context
- Eval Execution Context (property of global)

code execution ke 2 phase hote hain:
1. Memory Creation Phase
2. Execution Phase 

Step 1: Global Execution - this

Step 2: Memory Phase 
val1 -> undefined
val2 -> undefined
addNum -> definition
result1 -> undefined
result2 -> undefined

Step 3: Execution phase
val1 -> 10
val2 -> 5
result1 = addNum() -> Executional Context (eik naya sandbox bnta hai hr baar function execute hone pr jiske again 2 phase bnte hain aur executional phase ke baad ye sanbox phr delete bhi hojaata hai)
result1 = 15
result2 =  addNum() -> Executional Context (again new box banega)

Executional Context | 01:
new variable environment + execution thread
    - Memory phase: 
        val1 -> undefined
        val2 -> undefined
        total -> undefined

    - Execution context (actual processing)
        num1 -> 10
        num2 -> 5
        total -> 15 (returned to global executional context )
variable return hojayega hai global executional context main

Executional Context | 02:
NVE + thread
    - Memory phase: 
        val1 -> undefined
        val2 -> undefined
        total -> undefined

    - Execution context (actual processing)
        num1 -> 10
        num2 -> 2
        total -> 12 (returned to global executional context )
variable return hojayega hai global executional context main

Call Stack: (lifo method)
    is main bhi sbse pehle global execution to hota hi hai aur phr jese jese function bnta hai call stack ke andr aata hai execute hota hai nikal jaata hai lekin do ya teen call hogaye to jo last main aaya wo pehle execute hoga just like lifo method

Summary:
The working of the JavaScript works on three phases:
1. Global Execution Context
2. Memory phase / Creation phase
3. Execution phase

Phase 1: Global Execution Context
The value of `this` keyword is set to Global Execution Context (which is an empty Object in NODE environment, & window object in browser environment)

Phase 2: Memory phase
During this phase, JS engine scans the code and assigns the initial values for the variables , functions, etc.. For variables they are 'undefined' and for functions they are set to their function definition

Phase 3: Execution phase
After the creation phase completed, the execution phase begins where actual values of the variables are set. And when the functions are called it creates a new 'Function Execution' context which consists of two phases (they works same as explained above but only for the particular function scope):
1. Memory phase 
2. Execution phase 
The return value of the 'Function Execution' context is passed to the Global Execution Context

******************** Arrays ********************
shallow copies = copy with references (original bhi change hota rahega)
deep copies = without reference

Array methods:
push
pop
unshift
shift
includes
indexOf
join
slice() = original array ko manipulate nhi krta
splice() = original array ko manipulate krta hai aur range bhi included hoti hai
concat() = combine two or more arrays and returns a new array
spread operator = same concat wala kaam bhi ye krta hai easily
flat(Infinity) = arrays ke andr arrays sb elements ko eik hi array main krdega

Array.isArray('Anas') => false
Array.from('Anas') => ['A', 'n', 'a', 's']
const allHeros = [...marvelHeros, ...dcHeros]
Array.of(var1, var2, var3) => [var1_value, var2_value, var3_value]

High Order Array Loops:
Map bhi eik iterator hai object ki tarh bs ye key value pair ki sequence yaad rkhta hai and kisi same chz ko repeat nhi hone deta aur forOf loop main bhi use hojaata hai jbke obj use nhi ho paata
const map = new Map();
map.set('In', 'India')
map.set('PK', 'Pakistan')

for (const key of map){
   console.log(key) => [In, India], [PK, Pakistan]
}
for (const [key, value] of map){
   console.log(key, ':-', value) => [In :- India], [PK :- Pakistan]
}

forof 'values' deta hai jbke forin 'keys' deta hai
array ki bhi keys hoti hain jo 0 se start hoti hain aur sb numbers hoti hain
forin = objects ke saath use hojaata hai easily but map ke saath kaam nhi krta

.forEach((item, index, array) => {});

.reduce((accumulator, currentValue) => {}); = ye do paramters leta hai eik accumulator aur doosra currentValue aur phr callback ke baad initial value bhi deni hoti hai jo first time accumulator leta hai and then uske baad se (accumulator + currentValue) jo result aata hai wo accumulator ki value ban jaati hai

******************** Objects ********************
constructor se jo obj banega wo singleton object bnta hai
example => Object.create

jo literals ki tarh ham declare krte hain wo singleton nhi bnta

symbol ko obj main likhne ka tareeqa:
const mySymbol = Symbol('key01');
const obj = {
    [mySymbol]: 'myKey';
};

Object.freeze(object_name); = object main kch change nhi hoga
Object.assign(target, source); or we can also use spread operator bcuz it is easy as well as latest
Object.keys(object_name) => output in array datatype
Object.values(object_name) => output in array datatype
Object.entries(object_name);
Object.hasOwnProperty(property_name);

destructuring krte waqt property ka naam bhi change kr skte hain yu
const {courseInstructor: instructor} = course;

******************** DOM Manipulation ********************
HTMLCollection, NodeList alag alag hain array ki tarh hote hain but array nhi hotay
HTMLCollection bhi alag hota hai NodeList se

document.getElementById('title').id;
document.getElementById('title').class;
document.getElementById('title').getAttribute('id');
document.getElementById('title').getAttribute('class');
document.getElementById('title').setAttribute('class', 'test');
document.getElementByClassName('heading');


const title = document.getElementById('title');
title.style.backgroundColor = 'green';

title.textContent; = saara text dedega jo css se hide kia hoga wo bhi text show krdega textContent
title.innerHTML; = poora html deta hai
title.innerText; = wo text dega jo visible hoga body pr

document.querySelector('.h1')
document.querySelectorAll('.h1')
NodeList[0].style.color = 'red';

convert nodeList or HTMLCollection into array:
Array.from(HTMLCollection)

const parent = document.querySelector('.parent');
parent.children; => output in HTMLCollection
document.querySelector('.parent').children[1].innerHTML;
HTMLCollection ko loop krne ke liye for loop to kaam aata hai

parent.firstElementChild
parent.lastElementChild

child.parentElement
child.nextElementSibling

parent.childNodes = is nodes main poora eik tree alag se hota hai jis main line break bhi eik text count hota hai, comment bhi hota hai aur element to hota hi hai

const div = document.createElement('div');
div.className = 'abc'
div.setAttribute('title', 'my title');
div.innerText = 'My text is here'; => ye dhund ke value ko overwrite krta hai
but ye aese bhi kia jaaskta hai:
const addText = document.createTextNode('My text is here');
div.appendChild(addText) => it is just optimized code
document.body.appendChild(div)

EDIT:
secondChild.innerHTML = 'xyz';
secondChild.replaceWith(newChild); (optimized)
secondChild.outerHTML = '<li>zyx</li>'

REMOVE:
child.remove();
removeChild(child_element)

******************** Events ********************
addEventListener ka eik third parameter bhi hota hai jisko kehte hain event propagation jiski value true ya false hoti hai
false value = event bubbling (bottom to top), is bubbling ko stop krne ke liye bhi eik aata hai event.stopPropagation(); jo top pe nhi jaata 
true value = event capturing (top to bottom)

ul.addEventListener('click', function(){
    console.log('clicked')
}, false)
li.addEventListener('click', function(){
    console.log('clicked')
}, false)

ab pehle li waala log chalega phr ul waala lekin true value main iska opposite hoga

e.preventDefault() se uska default behaviour ruk jaata hai
event.target => means ye event kahan se aaraha hai wo element milta hai aapko
e.target.parentNode
e.target.tagName

******************** Async Javascript *******************
Javasccript:
    - Synchronous
    - Single threaded (default)

Execution Context
    - execute one line of code at a time
    - each operation waits for the last one to complete before executing

Blocking code 
    - block the flow of program
    - read file sync
    VS Non Blocking code
    - does not block execution
    - read file async 

setInterval() ka third argument bhi hota hai jo callback function ke parameter main milta hai

Promises ko ham create bhi krte hain aur consume bhi
.then() ka relation direct resolve se hota hai, in dono ko connect krne ke liye resolve() method ko call krna parta hai
reject ki value .catch() main milti hai
chaining krte waqt .then() jo return kare wohi next waale .then() ko miljaati hai value
.finally() => ye to hamesha hamesha execute hoga 
async await ka eik problem hai wo direct hi erros handle nhi kr skte, isi liye pr try/catch use hote hain unke through error gracefully handle hojaate hain




